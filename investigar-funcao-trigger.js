require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function investigarFuncaoTrigger() {
  console.log('üîç INVESTIGANDO C√ìDIGO DA FUN√á√ÉO DO TRIGGER');
  
  try {
    // 1. Buscar o c√≥digo da fun√ß√£o reduce_stock_on_sale
    console.log('\nüìã 1. Buscando c√≥digo da fun√ß√£o reduce_stock_on_sale...');
    
    const { data: funcCode, error: funcError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          proname as function_name,
          prosrc as function_body,
          proargnames as arg_names
        FROM pg_proc 
        WHERE proname = 'reduce_stock_on_sale';
      `
    });

    if (funcError) {
      console.log('‚ùå Erro ao buscar fun√ß√£o:', funcError.message);
    } else if (funcCode && funcCode.length > 0) {
      console.log('‚úÖ Fun√ß√£o encontrada:');
      console.log('üìù C√≥digo da fun√ß√£o:');
      console.log('=' .repeat(80));
      console.log(funcCode[0].function_body);
      console.log('=' .repeat(80));
    } else {
      console.log('‚ùå Fun√ß√£o reduce_stock_on_sale n√£o encontrada');
    }

    // 2. Verificar todas as fun√ß√µes relacionadas a stock/sale
    console.log('\nüîç 2. Verificando todas as fun√ß√µes relacionadas...');
    
    const { data: allFuncs, error: allFuncError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          proname as function_name,
          prosrc as function_body
        FROM pg_proc 
        WHERE proname LIKE '%stock%' 
           OR proname LIKE '%sale%'
        ORDER BY proname;
      `
    });

    if (allFuncError) {
      console.log('‚ùå Erro ao buscar fun√ß√µes:', allFuncError.message);
    } else if (allFuncs && allFuncs.length > 0) {
      console.log(`‚úÖ ${allFuncs.length} fun√ß√µes encontradas:`);
      allFuncs.forEach(func => {
        console.log(`\n--- ${func.function_name} ---`);
        console.log(func.function_body);
        console.log('-'.repeat(50));
      });
    } else {
      console.log('‚ùå Nenhuma fun√ß√£o encontrada');
    }

    // 3. Verificar se h√° m√∫ltiplas vers√µes da mesma fun√ß√£o
    console.log('\nüîç 3. Verificando vers√µes m√∫ltiplas...');
    
    const { data: versions, error: versionError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          proname as function_name,
          oid,
          proargnames,
          proargtypes
        FROM pg_proc 
        WHERE proname LIKE '%reduce_stock%'
           OR proname LIKE '%stock_on_sale%'
        ORDER BY proname, oid;
      `
    });

    if (versionError) {
      console.log('‚ùå Erro ao verificar vers√µes:', versionError.message);
    } else if (versions && versions.length > 0) {
      console.log(`‚úÖ ${versions.length} vers√µes encontradas:`);
      versions.forEach(ver => {
        console.log(`   - ${ver.function_name} (OID: ${ver.oid})`);
      });
      
      // Verificar se h√° duplicatas
      const funcNames = versions.map(v => v.function_name);
      const duplicates = funcNames.filter((name, index) => funcNames.indexOf(name) !== index);
      
      if (duplicates.length > 0) {
        console.log('üö® FUN√á√ïES DUPLICADAS ENCONTRADAS:');
        duplicates.forEach(name => console.log(`   - ${name}`));
      }
    } else {
      console.log('‚ùå Nenhuma vers√£o encontrada');
    }

    // 4. Testar manualmente a redu√ß√£o de estoque
    console.log('\nüß™ 4. Teste manual de redu√ß√£o...');
    
    const { data: testProduct, error: productError } = await supabase
      .from('products')
      .select('id, name, stock_quantity')
      .eq('active', true)
      .gt('stock_quantity', 10)
      .limit(1)
      .single();

    if (productError || !testProduct) {
      console.log('‚ùå Produto n√£o encontrado');
      return;
    }

    console.log(`üì¶ Produto: ${testProduct.name} (Estoque inicial: ${testProduct.stock_quantity})`);

    // Reduzir manualmente 1 unidade
    console.log('‚è±Ô∏è Reduzindo 1 unidade manualmente...');
    
    const { data: updateResult, error: updateError } = await supabase
      .from('products')
      .update({ 
        stock_quantity: testProduct.stock_quantity - 1 
      })
      .eq('id', testProduct.id)
      .select();

    if (updateError) {
      console.log('‚ùå Erro na atualiza√ß√£o manual:', updateError.message);
    } else {
      console.log('‚úÖ Atualiza√ß√£o manual realizada');
    }

    // Verificar resultado
    const { data: afterManual, error: afterError } = await supabase
      .from('products')
      .select('stock_quantity')
      .eq('id', testProduct.id)
      .single();

    if (!afterError && afterManual) {
      console.log(`üìä Ap√≥s redu√ß√£o manual: ${afterManual.stock_quantity}`);
      console.log(`üìà Diferen√ßa: ${testProduct.stock_quantity - afterManual.stock_quantity}`);
    }

    // Restaurar estoque
    await supabase
      .from('products')
      .update({ stock_quantity: testProduct.stock_quantity })
      .eq('id', testProduct.id);

    console.log('‚úÖ Estoque restaurado');

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

investigarFuncaoTrigger();