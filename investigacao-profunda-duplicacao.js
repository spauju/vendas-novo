require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function investigacaoProfundaDuplicacao() {
  console.log('üîç INVESTIGA√á√ÉO PROFUNDA - CAUSA RAIZ DA DUPLICA√á√ÉO 2X');
  console.log('='.repeat(70));
  
  try {
    // 1. Investigar TODOS os schemas e triggers do PostgreSQL
    console.log('\n1Ô∏è‚É£ INVESTIGANDO TODOS OS SCHEMAS E TRIGGERS...');
    
    const { data: allSchemas, error: schemaError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          schema_name,
          schema_owner
        FROM information_schema.schemata 
        WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
        ORDER BY schema_name;
      `
    });

    if (schemaError) {
      console.error('‚ùå Erro ao buscar schemas:', schemaError);
    } else {
      console.log(`üìä Schemas encontrados: ${allSchemas?.length || 0}`);
      allSchemas?.forEach(schema => {
        console.log(`   - ${schema.schema_name} (owner: ${schema.schema_owner})`);
      });
    }

    // 2. Buscar TODOS os triggers em TODOS os schemas
    console.log('\n2Ô∏è‚É£ BUSCANDO TRIGGERS EM TODOS OS SCHEMAS...');
    
    const { data: allTriggers, error: triggerError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          n.nspname as schema_name,
          c.relname as table_name,
          t.tgname as trigger_name,
          p.proname as function_name,
          CASE t.tgenabled 
            WHEN 'O' THEN 'enabled'
            WHEN 'D' THEN 'disabled'
            WHEN 'R' THEN 'replica'
            WHEN 'A' THEN 'always'
            ELSE 'unknown'
          END as status,
          t.tgisinternal as is_internal,
          CASE t.tgtype & 2
            WHEN 0 THEN 'BEFORE'
            ELSE 'AFTER'
          END as timing,
          CASE t.tgtype & 28
            WHEN 4 THEN 'INSERT'
            WHEN 8 THEN 'DELETE'
            WHEN 16 THEN 'UPDATE'
            WHEN 12 THEN 'INSERT OR DELETE'
            WHEN 20 THEN 'INSERT OR UPDATE'
            WHEN 24 THEN 'DELETE OR UPDATE'
            WHEN 28 THEN 'INSERT OR DELETE OR UPDATE'
            ELSE 'UNKNOWN'
          END as events,
          pg_get_triggerdef(t.oid) as definition
        FROM pg_trigger t
        JOIN pg_class c ON t.tgrelid = c.oid
        JOIN pg_namespace n ON c.relnamespace = n.oid
        JOIN pg_proc p ON t.tgfoid = p.oid
        WHERE n.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
        ORDER BY n.nspname, c.relname, t.tgname;
      `
    });

    if (triggerError) {
      console.error('‚ùå Erro ao buscar triggers:', triggerError);
    } else {
      console.log(`üìä Total de triggers encontrados: ${allTriggers?.length || 0}`);
      
      // Agrupar por schema
      const triggersBySchema = {};
      allTriggers?.forEach(trigger => {
        if (!triggersBySchema[trigger.schema_name]) {
          triggersBySchema[trigger.schema_name] = [];
        }
        triggersBySchema[trigger.schema_name].push(trigger);
      });

      Object.keys(triggersBySchema).forEach(schema => {
        console.log(`\nüìã Schema: ${schema} (${triggersBySchema[schema].length} triggers)`);
        
        triggersBySchema[schema].forEach(trigger => {
          console.log(`   - ${trigger.table_name}.${trigger.trigger_name}`);
          console.log(`     Fun√ß√£o: ${trigger.function_name}`);
          console.log(`     Status: ${trigger.status} | Timing: ${trigger.timing} ${trigger.events}`);
          
          // Destacar triggers relacionados a estoque ou vendas
          if (trigger.table_name === 'sale_items' || 
              trigger.function_name.includes('stock') || 
              trigger.function_name.includes('sale') ||
              trigger.definition.includes('stock_quantity')) {
            console.log(`     üö® RELEVANTE PARA ESTOQUE!`);
          }
        });
      });
    }

    // 3. Investigar fun√ß√µes que modificam stock_quantity
    console.log('\n3Ô∏è‚É£ INVESTIGANDO FUN√á√ïES QUE MODIFICAM ESTOQUE...');
    
    const { data: stockFunctions, error: funcError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          n.nspname as schema_name,
          p.proname as function_name,
          p.prosrc as function_body,
          p.prokind as function_kind,
          p.provolatile as volatility,
          p.proisstrict as is_strict
        FROM pg_proc p
        JOIN pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
        AND (
          p.prosrc ILIKE '%stock_quantity%' OR
          p.prosrc ILIKE '%sale_items%' OR
          p.proname ILIKE '%stock%' OR
          p.proname ILIKE '%sale%'
        )
        ORDER BY n.nspname, p.proname;
      `
    });

    if (funcError) {
      console.error('‚ùå Erro ao buscar fun√ß√µes:', funcError);
    } else {
      console.log(`üìä Fun√ß√µes relacionadas a estoque: ${stockFunctions?.length || 0}`);
      
      stockFunctions?.forEach((func, index) => {
        console.log(`\n${index + 1}. ${func.schema_name}.${func.function_name}`);
        console.log(`   Tipo: ${func.function_kind === 'f' ? 'Function' : 'Procedure'}`);
        console.log(`   Volatilidade: ${func.volatility}`);
        
        if (func.function_body.includes('stock_quantity')) {
          console.log('   üéØ MODIFICA ESTOQUE!');
          
          // Contar opera√ß√µes de UPDATE
          const updateMatches = (func.function_body.match(/UPDATE.*stock_quantity/gi) || []).length;
          const setMatches = (func.function_body.match(/SET.*stock_quantity/gi) || []).length;
          
          console.log(`   üìä Opera√ß√µes UPDATE: ${updateMatches}`);
          console.log(`   üìä Opera√ß√µes SET: ${setMatches}`);
          
          if (updateMatches > 1 || setMatches > 1) {
            console.log('   ‚ö†Ô∏è M√öLTIPLAS OPERA√á√ïES DE ESTOQUE!');
          }
          
          // Mostrar linhas relevantes
          const lines = func.function_body.split('\n');
          const stockLines = lines.filter(line => 
            line.toLowerCase().includes('stock_quantity')
          );
          
          if (stockLines.length > 0) {
            console.log('   Linhas de estoque:');
            stockLines.forEach(line => {
              console.log(`     ${line.trim()}`);
            });
          }
        }
      });
    }

    // 4. Verificar se h√° extens√µes ativas que podem afetar
    console.log('\n4Ô∏è‚É£ VERIFICANDO EXTENS√ïES ATIVAS...');
    
    const { data: extensions, error: extError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          extname as extension_name,
          extversion as version,
          n.nspname as schema_name
        FROM pg_extension e
        JOIN pg_namespace n ON e.extnamespace = n.oid
        ORDER BY extname;
      `
    });

    if (extError) {
      console.error('‚ùå Erro ao verificar extens√µes:', extError);
    } else {
      console.log(`üìä Extens√µes ativas: ${extensions?.length || 0}`);
      extensions?.forEach(ext => {
        console.log(`   - ${ext.extension_name} v${ext.version} (${ext.schema_name})`);
        
        // Destacar extens√µes que podem afetar triggers
        if (['plpgsql', 'supabase_vault', 'pgsodium'].includes(ext.extension_name)) {
          console.log(`     üîç Pode afetar triggers/fun√ß√µes`);
        }
      });
    }

    // 5. Investigar configura√ß√µes espec√≠ficas do PostgreSQL
    console.log('\n5Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES DO POSTGRESQL...');
    
    const { data: pgSettings, error: settingsError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          name,
          setting,
          unit,
          category,
          short_desc
        FROM pg_settings 
        WHERE name IN (
          'log_statement',
          'log_min_duration_statement',
          'shared_preload_libraries',
          'session_replication_role',
          'synchronous_commit'
        )
        ORDER BY name;
      `
    });

    if (settingsError) {
      console.error('‚ùå Erro ao verificar configura√ß√µes:', settingsError);
    } else {
      console.log(`üìä Configura√ß√µes relevantes:`);
      pgSettings?.forEach(setting => {
        console.log(`   - ${setting.name}: ${setting.setting}${setting.unit || ''}`);
        console.log(`     ${setting.short_desc}`);
      });
    }

    // 6. Teste com logging detalhado
    console.log('\n6Ô∏è‚É£ TESTE COM LOGGING DETALHADO...');
    
    // Buscar produto para teste
    const { data: testProduct, error: productError } = await supabase
      .from('products')
      .select('id, name, stock_quantity')
      .gt('stock_quantity', 10)
      .limit(1)
      .single();

    if (productError || !testProduct) {
      console.log('‚ùå Produto n√£o encontrado para teste');
      return;
    }

    const estoqueInicial = testProduct.stock_quantity;
    console.log(`üì¶ Produto teste: ${testProduct.name} (Estoque: ${estoqueInicial})`);
    
    // Habilitar logging se poss√≠vel
    try {
      await supabase.rpc('exec_sql', {
        sql: `SET log_statement = 'all';`
      });
      console.log('‚úÖ Logging habilitado');
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel habilitar logging');
    }

    // Criar venda com monitoramento
    console.log('\nüß™ Criando venda com monitoramento...');
    
    const { data: testSale, error: saleError } = await supabase
      .from('sales')
      .insert({
        total_amount: 25.00,
        payment_method: 'cash',
        status: 'completed',
        payment_status: 'paid'
      })
      .select()
      .single();

    if (saleError) {
      console.error('‚ùå Erro ao criar venda:', saleError);
      return;
    }

    console.log(`‚úÖ Venda criada: ${testSale.id}`);
    
    // Monitorar estoque antes da inser√ß√£o
    console.log(`üìä Estoque antes da inser√ß√£o: ${estoqueInicial}`);
    
    // Inserir item com quantidade espec√≠fica
    const quantidadeTeste = 3;
    console.log(`üìù Inserindo item com ${quantidadeTeste} unidades...`);
    
    const { data: testItem, error: itemError } = await supabase
      .from('sale_items')
      .insert({
        sale_id: testSale.id,
        product_id: testProduct.id,
        quantity: quantidadeTeste,
        unit_price: 8.33
      })
      .select()
      .single();

    if (itemError) {
      console.error('‚ùå Erro ao inserir item:', itemError);
      return;
    }

    console.log(`‚úÖ Item inserido: ${testItem.id}`);
    
    // Aguardar e verificar m√∫ltiplas vezes
    const checkIntervals = [500, 1000, 2000, 3000];
    
    for (const interval of checkIntervals) {
      await new Promise(resolve => setTimeout(resolve, interval));
      
      const { data: currentProduct, error: checkError } = await supabase
        .from('products')
        .select('stock_quantity')
        .eq('id', testProduct.id)
        .single();

      if (!checkError && currentProduct) {
        const reducaoAtual = estoqueInicial - currentProduct.stock_quantity;
        console.log(`üìä Ap√≥s ${interval}ms: Estoque=${currentProduct.stock_quantity}, Redu√ß√£o=${reducaoAtual}`);
        
        if (reducaoAtual > quantidadeTeste) {
          console.log(`   ‚ö†Ô∏è Redu√ß√£o excessiva detectada: ${reducaoAtual}/${quantidadeTeste}`);
        }
      }
    }

    // Verificar movimenta√ß√µes de estoque
    const { data: movements, error: movError } = await supabase
      .from('stock_movements')
      .select('*')
      .eq('product_id', testProduct.id)
      .eq('reference_id', testSale.id)
      .order('created_at', { ascending: false });

    if (!movError && movements) {
      console.log(`üìã Movimenta√ß√µes registradas: ${movements.length}`);
      movements.forEach((mov, index) => {
        console.log(`   ${index + 1}. ${mov.movement_type}: ${mov.quantity} unidades`);
        console.log(`      ${mov.previous_stock} ‚Üí ${mov.new_stock}`);
        console.log(`      Notas: ${mov.notes}`);
      });
    }

    // Limpeza
    console.log('\nüßπ Limpando dados de teste...');
    await supabase.from('sale_items').delete().eq('id', testItem.id);
    await supabase.from('sales').delete().eq('id', testSale.id);
    
    // Restaurar estoque
    await supabase
      .from('products')
      .update({ stock_quantity: estoqueInicial })
      .eq('id', testProduct.id);
    
    console.log('‚úÖ Limpeza conclu√≠da');

    // 7. An√°lise final
    console.log('\n7Ô∏è‚É£ AN√ÅLISE FINAL...');
    
    const finalStock = await supabase
      .from('products')
      .select('stock_quantity')
      .eq('id', testProduct.id)
      .single();

    if (finalStock.data) {
      const reducaoFinal = estoqueInicial - finalStock.data.stock_quantity;
      console.log(`üìä Redu√ß√£o final ap√≥s limpeza: ${reducaoFinal}`);
      
      if (reducaoFinal === 0) {
        console.log('‚úÖ Estoque restaurado corretamente');
      } else {
        console.log(`‚ùå Estoque n√£o foi restaurado completamente: ${reducaoFinal} unidades`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro durante investiga√ß√£o:', error);
  }
}

// Executar investiga√ß√£o
investigacaoProfundaDuplicacao();